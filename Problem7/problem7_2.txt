class Router:
    def __init__(self handle = None, not_found = None):
        self.route_trie = RouteTrie(handle)
        self.route_trie_not_found = not_found

    def add_handler(self, path, handle):
        split the path
        use the insert function in the RouteTrie class
    The time complexity is O(n) because the run time of the insert method called in this function is O(n)

    def lookup(self, path):
        split the path
        use find function provided by the RouteTrie class
        if handel:
            return it
        return not_found
    The time complexity is O(1) because it runs in the constant time.
    
    def split_path(self, path):
        return path.split('/')

The main go is to store HTTP Routers which also could be implemented in most of the tree data structures.
Using hash table (dictionary) is the best way to store string data type. Thus, I choose to implement the
Trie data structure in this task.