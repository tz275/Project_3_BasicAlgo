Find the square root of the integer and floor the answer.

To accomplish the goal. I split this question into 2 parts.
1) find the square root
2) floor the square root

def sqrt(x):
    start = lowest possible answer (start from 0)
    ret = the final answer
    end = number

    while start <= end:
        mid = int((start + end) / 2)

        if mid ** 2 == number:
            return floor(mid) (which is exactly the answer)

        elif mid ** 2 < number:
            (like 2**2 = 4 < 5)
            we need to find the answer greater than the mid
            start = mid + 1
            also renew the ret variable in case we can't find the exact mid value and we need to floor it
            ret = mid

        else:
            (like 3**3 = 6 > 5)
            we need to find the answer smaller than the mid
            end = mid - 1
            we don't renew the ret variable is because we find the square root the the input
    
    return floor(ret)

I choose to use the "Binary Search" algorithm to approach this problem.
Because the run time will be optimized by using this divide and conquer technique.

Time Complexity:
Run time complexity of the sqrt function is O(log(n)) due to the divided and conquer algorithm that I applied in this function.

Space complexity:
I created total 4 additional variables in this function (start, end, ret, mid). Because the number of the variables I
need to create is constant in this case. The space complexity of this function is O(1).
