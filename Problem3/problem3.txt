Rearrange Array Elements so as to form two number such that their sum is maximum.
Return these two numbers. 
You can assume that all array elements are in the range [0, 9]. 
The number of digits in both the numbers cannot differ by more than 1. 
You're not allowed to use any sorting function that Python provides and the expected time complexity is O(nlog(n)).

To achieve the goal, I split this problem into 2 sub problems.
1) Select: select the k'th largest element in the array
2) Arrange: recursively arrange the largest and second largest into different group

To make the select algorithm in the efficient way. I decide to use the quick and divide algorithm to achieve the goal.
def quickSort(input_list, low, high):
        sort the whole array

def rearrange_digits(input_list):
        ret1, ret2 = [], []
        for i in range(1, len(input_list) + 1) and reverse it:
            if i is divisible by 2:
                append it into ret1
            else:
                append it into ret2
        convert ret1 and ret 2 from the list type into the int type
        return ret1 and ret 2

The main element that decide the function's run time is the soring part. And I choose to use the quick sort
algorithm is because of the smallest run time compare to other sorting algorithms like merge sort, bubble sort, etc.

Time Complexity:
the run time of the entire function should be O(nlog(n)). Because the run time of the sorting algorithm that I used
is O(nlog(n)). Even there is another for loop in the rearrange_digits function, but their relationship should be adding.
Which means the run time should be nlog(n) + n. When we consider the worst case the run time will be O(nlog(n)).

Space Complexity:
The space complexity of the function "partitioning" is O(1), due to the variables that has been created is constant.
However, the function "quickSort" recursively divide and combine the split array.
The space complexity of the "quickSort" function is O(log(n))
When we applied the quicksort function into the "rearrange_digits" function. The space complexity should be the same as
the quicksort function. Because the additional variables created in the "rearrange_digits" function is constant.



    


